# -*- coding: utf-8 -*-
"""Comprobantes faltantes por mes.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1t7XbmfJAcqIG_nVEiGDSord5u4rUa_xI
"""

### Importo librerias
import pandas as pd
import numpy as np
from datetime import datetime, timedelta

### genero objeto primer dia del mes anterior
fecha_hoy = datetime.today().date()
mes_anterior = (fecha_hoy.replace(day=1) - timedelta(days=1)).replace(day=1)
mes_anterior= np.datetime64(mes_anterior)
print(mes_anterior)

### importo datos de afip
comprobantes_afip= pd.read_excel("01-2024.xlsx", sheet_name="Afip")

### importo datos de sistema
comprobantes_sistema=pd.read_excel("01-2024.xlsx", sheet_name="Sistema")

### transformo formato de fecha
comprobantes_sistema["Fecha"]=pd.to_datetime(comprobantes_sistema["Fecha"])

comprobantes_sistema["Fecha"]= comprobantes_sistema["Fecha"].dt.strftime("%d/%m/%Y")

comprobantes_sistema.head(10)

### elimino guiones del cuit en base sistema
comprobantes_sistema["C.U.I.T."]=comprobantes_sistema["C.U.I.T."].str.replace('-', '')

### genero elemento unico en sistemas concatenando nro de comprobante con nro de cuit
comprobantes_sistema["Id"]= comprobantes_sistema["N° Compr."]+"-"+comprobantes_sistema['C.U.I.T.']

### completo con 0 los digitos faltantes en la base de afip par apoder genera el mismo id que en sistema
comprobantes_afip["Número Desde"]=comprobantes_afip["Número Desde"].astype(str).str.zfill(8)

comprobantes_afip["Punto de Venta"]= comprobantes_afip["Punto de Venta"].astype(str).str.zfill(4)

comprobantes_afip.head(10)

comprobantes_afip["N° Compr."]=comprobantes_afip['Punto de Venta']+"-"+comprobantes_afip['Número Desde']

comprobantes_afip['Nro. Doc. Emisor']=comprobantes_afip['Nro. Doc. Emisor'].astype(str)

comprobantes_afip["Id"]=comprobantes_afip["N° Compr."]+"-"+comprobantes_afip['Nro. Doc. Emisor']

comprobantes_afip.columns

### genero los faltantes del sistema buscando por Id en ambas bases y que me tire los datos de la base de afip que faltan
faltantes_sistema= pd.merge(comprobantes_afip[['Fecha','Id','Tipo','N° Compr.','Nro. Doc. Emisor','Denominación Emisor','Imp. Neto Gravado','IVA', 'Imp. Total']]
                            , comprobantes_sistema[['Id']], on="Id", how="left", indicator= True).query('_merge == "left_only"')

faltantes_sistema.head(10)

faltantes_sistema.isnull().sum()

### Cambio a negativo los valores de las notas de credito
faltantes_sistema.loc[faltantes_sistema['Tipo'] == '3 - Nota de Crédito A', 'IVA'] = faltantes_sistema.loc[faltantes_sistema['Tipo'] == '3 - Nota de Crédito A', 'IVA'].apply(lambda x: -x)

faltantes_sistema.loc[faltantes_sistema['Tipo'] == '3 - Nota de Crédito A', 'Imp. Neto Gravado'] = faltantes_sistema.loc[faltantes_sistema['Tipo'] == '3 - Nota de Crédito A', 'Imp. Neto Gravado'].apply(lambda x: -x)

faltantes_sistema.loc[faltantes_sistema['Tipo'] == '3 - Nota de Crédito A', 'Imp. Total'] = faltantes_sistema.loc[faltantes_sistema['Tipo'] == '3 - Nota de Crédito A', 'Imp. Total'].apply(lambda x: -x)

#faltantes_sistema.loc[faltantes_sistema['Tipo'] == '8 - Nota de Crédito B', 'IVA'] = faltantes_sistema.loc[faltantes_sistema['Tipo'] == '8 - Nota de Crédito B', 'IVA'].apply(lambda x: -x)
#faltantes_sistema.loc[faltantes_sistema['Tipo'] == '8 - Nota de Crédito B', 'Imp. Neto Gravado'] = faltantes_sistema.loc[faltantes_sistema['Tipo'] == '8 - Nota de Crédito B', 'Imp. Neto Gravado'].apply(lambda x: -x)
#faltantes_sistema.loc[faltantes_sistema['Tipo'] == '8 - Nota de Crédito B', 'Imp. Total'] = faltantes_sistema.loc[faltantes_sistema['Tipo'] == '3 - Nota de Crédito A', 'Imp. Total'].apply(lambda x: -x)

faltantes_sistema=faltantes_sistema.fillna(0)

### sumo el iva total no cargado en sistema
sum(faltantes_sistema["IVA"])

faltantes_sistema=faltantes_sistema.drop("_merge", axis=1)

### exporto en excel
faltantes_sistema.to_excel("Faltantes_sistema.xlsx", index=False)

"""# Auditoria de comprobantes con posibles errores de carga"""

### cambio formato de fecha
comprobantes_sistema['Fecha'] = pd.to_datetime(comprobantes_sistema['Fecha'], format='%d/%m/%Y')

### filtro exclusivamente los comprobantes cargados en el libro iva que se corresponden con el mes en analisis
cs_mes_actual= comprobantes_sistema[comprobantes_sistema["Fecha"]>= mes_anterior]

cs_mes_actual.head(10)

cs_mes_actual.columns

### busco comprobantes que faltan en afip y tengo en sistema (ojo que aca los ticket de viejas impresoras fiscales no figuran en afip)
faltantes_afip= pd.merge(cs_mes_actual[['Id','Fecha', 'N° Compr.', 'Tip. Com.','Nombre / Razón Social', 'C.U.I.T.', 'NETO GRAVADO', 'IVA 27%',
       'IVA 21%', 'IVA 10,5%', 'NO GRAVADO','TOTAL']], comprobantes_afip[['Id']], on="Id", how="left", indicator= True).query('_merge == "left_only"')

faltantes_afip.head(10)

### exporto faltantes en afip
faltantes_afip.to_excel("faltantes_afip.xlsx", index=False)

### genero lista de cuits de comprobantes que faltan en ambas bases
cuits_faltantes_sistema=faltantes_sistema["Nro. Doc. Emisor"].unique()
cuits_faltantes_sistema=pd.DataFrame(cuits_faltantes_sistema,columns=["C.U.I.T."])
cuits_faltantes_sistema.head(1000)

cuits_faltantes_afip=faltantes_afip["C.U.I.T."].unique()
cuits_faltantes_afip=pd.DataFrame(cuits_faltantes_afip, columns=["C.U.I.T."])
cuits_faltantes_afip.head(100)

### busco coincidencias de cuits que faltan en ambas bases(buscar v), concateno listado y elimino duplicados
cuits_error1= cuits_faltantes_sistema[cuits_faltantes_sistema["C.U.I.T."].isin(cuits_faltantes_afip["C.U.I.T."])]
cuits_error2= cuits_faltantes_afip[cuits_faltantes_afip["C.U.I.T."].isin(cuits_faltantes_sistema["C.U.I.T."])]
cuits_error=pd.concat([cuits_error1,cuits_error2])
cuits_error.drop_duplicates(inplace=True)
cuits_error.head(100)

### busco que comprobantes faltan en afip cargados en el sistema y que estan en el listado de cuits con posibles errores
##o esta mal cargado el cuit o el numero de comprobante
comprobantes_errores=faltantes_afip[faltantes_afip["C.U.I.T."].isin(cuits_error["C.U.I.T."])]
comprobantes_errores.head(100)

comprobantes_errores=comprobantes_errores.drop("_merge",axis=1)

### exporto listado
comprobantes_errores.to_excel("comp_errores_nro.xlsx", index=False)